// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// RsiStrategy is an object representing the database table.
type RsiStrategy struct {
	ID              string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID          string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Name            string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Instrument      string    `boil:"instrument" json:"instrument" toml:"instrument" yaml:"instrument"`
	Granularity     string    `boil:"granularity" json:"granularity" toml:"granularity" yaml:"granularity"`
	OverboughtLevel int       `boil:"overbought_level" json:"overbought_level" toml:"overbought_level" yaml:"overbought_level"`
	OversoldLevel   int       `boil:"oversold_level" json:"oversold_level" toml:"oversold_level" yaml:"oversold_level"`
	Status          string    `boil:"status" json:"status" toml:"status" yaml:"status"`
	CreatedOn       time.Time `boil:"created_on" json:"created_on" toml:"created_on" yaml:"created_on"`
	LastEditedOn    time.Time `boil:"last_edited_on" json:"last_edited_on" toml:"last_edited_on" yaml:"last_edited_on"`
	DeletedOn       null.Time `boil:"deleted_on" json:"deleted_on,omitempty" toml:"deleted_on" yaml:"deleted_on,omitempty"`

	R *rsiStrategyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L rsiStrategyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RsiStrategyColumns = struct {
	ID              string
	UserID          string
	Name            string
	Instrument      string
	Granularity     string
	OverboughtLevel string
	OversoldLevel   string
	Status          string
	CreatedOn       string
	LastEditedOn    string
	DeletedOn       string
}{
	ID:              "id",
	UserID:          "user_id",
	Name:            "name",
	Instrument:      "instrument",
	Granularity:     "granularity",
	OverboughtLevel: "overbought_level",
	OversoldLevel:   "oversold_level",
	Status:          "status",
	CreatedOn:       "created_on",
	LastEditedOn:    "last_edited_on",
	DeletedOn:       "deleted_on",
}

// Generated where

var RsiStrategyWhere = struct {
	ID              whereHelperstring
	UserID          whereHelperstring
	Name            whereHelperstring
	Instrument      whereHelperstring
	Granularity     whereHelperstring
	OverboughtLevel whereHelperint
	OversoldLevel   whereHelperint
	Status          whereHelperstring
	CreatedOn       whereHelpertime_Time
	LastEditedOn    whereHelpertime_Time
	DeletedOn       whereHelpernull_Time
}{
	ID:              whereHelperstring{field: "\"rsi_strategies\".\"id\""},
	UserID:          whereHelperstring{field: "\"rsi_strategies\".\"user_id\""},
	Name:            whereHelperstring{field: "\"rsi_strategies\".\"name\""},
	Instrument:      whereHelperstring{field: "\"rsi_strategies\".\"instrument\""},
	Granularity:     whereHelperstring{field: "\"rsi_strategies\".\"granularity\""},
	OverboughtLevel: whereHelperint{field: "\"rsi_strategies\".\"overbought_level\""},
	OversoldLevel:   whereHelperint{field: "\"rsi_strategies\".\"oversold_level\""},
	Status:          whereHelperstring{field: "\"rsi_strategies\".\"status\""},
	CreatedOn:       whereHelpertime_Time{field: "\"rsi_strategies\".\"created_on\""},
	LastEditedOn:    whereHelpertime_Time{field: "\"rsi_strategies\".\"last_edited_on\""},
	DeletedOn:       whereHelpernull_Time{field: "\"rsi_strategies\".\"deleted_on\""},
}

// RsiStrategyRels is where relationship names are stored.
var RsiStrategyRels = struct {
	User string
}{
	User: "User",
}

// rsiStrategyR is where relationships are stored.
type rsiStrategyR struct {
	User *User
}

// NewStruct creates a new relationship struct
func (*rsiStrategyR) NewStruct() *rsiStrategyR {
	return &rsiStrategyR{}
}

// rsiStrategyL is where Load methods for each relationship are stored.
type rsiStrategyL struct{}

var (
	rsiStrategyAllColumns            = []string{"id", "user_id", "name", "instrument", "granularity", "overbought_level", "oversold_level", "status", "created_on", "last_edited_on", "deleted_on"}
	rsiStrategyColumnsWithoutDefault = []string{"id", "user_id", "name", "instrument", "granularity", "overbought_level", "oversold_level", "status", "created_on", "last_edited_on", "deleted_on"}
	rsiStrategyColumnsWithDefault    = []string{}
	rsiStrategyPrimaryKeyColumns     = []string{"id"}
)

type (
	// RsiStrategySlice is an alias for a slice of pointers to RsiStrategy.
	// This should generally be used opposed to []RsiStrategy.
	RsiStrategySlice []*RsiStrategy
	// RsiStrategyHook is the signature for custom RsiStrategy hook methods
	RsiStrategyHook func(context.Context, boil.ContextExecutor, *RsiStrategy) error

	rsiStrategyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	rsiStrategyType                 = reflect.TypeOf(&RsiStrategy{})
	rsiStrategyMapping              = queries.MakeStructMapping(rsiStrategyType)
	rsiStrategyPrimaryKeyMapping, _ = queries.BindMapping(rsiStrategyType, rsiStrategyMapping, rsiStrategyPrimaryKeyColumns)
	rsiStrategyInsertCacheMut       sync.RWMutex
	rsiStrategyInsertCache          = make(map[string]insertCache)
	rsiStrategyUpdateCacheMut       sync.RWMutex
	rsiStrategyUpdateCache          = make(map[string]updateCache)
	rsiStrategyUpsertCacheMut       sync.RWMutex
	rsiStrategyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var rsiStrategyBeforeInsertHooks []RsiStrategyHook
var rsiStrategyBeforeUpdateHooks []RsiStrategyHook
var rsiStrategyBeforeDeleteHooks []RsiStrategyHook
var rsiStrategyBeforeUpsertHooks []RsiStrategyHook

var rsiStrategyAfterInsertHooks []RsiStrategyHook
var rsiStrategyAfterSelectHooks []RsiStrategyHook
var rsiStrategyAfterUpdateHooks []RsiStrategyHook
var rsiStrategyAfterDeleteHooks []RsiStrategyHook
var rsiStrategyAfterUpsertHooks []RsiStrategyHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RsiStrategy) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rsiStrategyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RsiStrategy) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rsiStrategyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RsiStrategy) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rsiStrategyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RsiStrategy) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rsiStrategyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RsiStrategy) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rsiStrategyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RsiStrategy) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rsiStrategyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RsiStrategy) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rsiStrategyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RsiStrategy) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rsiStrategyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RsiStrategy) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rsiStrategyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRsiStrategyHook registers your hook function for all future operations.
func AddRsiStrategyHook(hookPoint boil.HookPoint, rsiStrategyHook RsiStrategyHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		rsiStrategyBeforeInsertHooks = append(rsiStrategyBeforeInsertHooks, rsiStrategyHook)
	case boil.BeforeUpdateHook:
		rsiStrategyBeforeUpdateHooks = append(rsiStrategyBeforeUpdateHooks, rsiStrategyHook)
	case boil.BeforeDeleteHook:
		rsiStrategyBeforeDeleteHooks = append(rsiStrategyBeforeDeleteHooks, rsiStrategyHook)
	case boil.BeforeUpsertHook:
		rsiStrategyBeforeUpsertHooks = append(rsiStrategyBeforeUpsertHooks, rsiStrategyHook)
	case boil.AfterInsertHook:
		rsiStrategyAfterInsertHooks = append(rsiStrategyAfterInsertHooks, rsiStrategyHook)
	case boil.AfterSelectHook:
		rsiStrategyAfterSelectHooks = append(rsiStrategyAfterSelectHooks, rsiStrategyHook)
	case boil.AfterUpdateHook:
		rsiStrategyAfterUpdateHooks = append(rsiStrategyAfterUpdateHooks, rsiStrategyHook)
	case boil.AfterDeleteHook:
		rsiStrategyAfterDeleteHooks = append(rsiStrategyAfterDeleteHooks, rsiStrategyHook)
	case boil.AfterUpsertHook:
		rsiStrategyAfterUpsertHooks = append(rsiStrategyAfterUpsertHooks, rsiStrategyHook)
	}
}

// One returns a single rsiStrategy record from the query.
func (q rsiStrategyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RsiStrategy, error) {
	o := &RsiStrategy{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for rsi_strategies")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RsiStrategy records from the query.
func (q rsiStrategyQuery) All(ctx context.Context, exec boil.ContextExecutor) (RsiStrategySlice, error) {
	var o []*RsiStrategy

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RsiStrategy slice")
	}

	if len(rsiStrategyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RsiStrategy records in the query.
func (q rsiStrategyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count rsi_strategies rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q rsiStrategyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if rsi_strategies exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *RsiStrategy) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (rsiStrategyL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRsiStrategy interface{}, mods queries.Applicator) error {
	var slice []*RsiStrategy
	var object *RsiStrategy

	if singular {
		object = maybeRsiStrategy.(*RsiStrategy)
	} else {
		slice = *maybeRsiStrategy.(*[]*RsiStrategy)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &rsiStrategyR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rsiStrategyR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(rsiStrategyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.RsiStrategies = append(foreign.R.RsiStrategies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.RsiStrategies = append(foreign.R.RsiStrategies, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the rsiStrategy to the related item.
// Sets o.R.User to related.
// Adds o to related.R.RsiStrategies.
func (o *RsiStrategy) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"rsi_strategies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, rsiStrategyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &rsiStrategyR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			RsiStrategies: RsiStrategySlice{o},
		}
	} else {
		related.R.RsiStrategies = append(related.R.RsiStrategies, o)
	}

	return nil
}

// RsiStrategies retrieves all the records using an executor.
func RsiStrategies(mods ...qm.QueryMod) rsiStrategyQuery {
	mods = append(mods, qm.From("\"rsi_strategies\""))
	return rsiStrategyQuery{NewQuery(mods...)}
}

// FindRsiStrategy retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRsiStrategy(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*RsiStrategy, error) {
	rsiStrategyObj := &RsiStrategy{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"rsi_strategies\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, rsiStrategyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from rsi_strategies")
	}

	return rsiStrategyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RsiStrategy) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no rsi_strategies provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rsiStrategyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	rsiStrategyInsertCacheMut.RLock()
	cache, cached := rsiStrategyInsertCache[key]
	rsiStrategyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			rsiStrategyAllColumns,
			rsiStrategyColumnsWithDefault,
			rsiStrategyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(rsiStrategyType, rsiStrategyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(rsiStrategyType, rsiStrategyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"rsi_strategies\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"rsi_strategies\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into rsi_strategies")
	}

	if !cached {
		rsiStrategyInsertCacheMut.Lock()
		rsiStrategyInsertCache[key] = cache
		rsiStrategyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RsiStrategy.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RsiStrategy) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	rsiStrategyUpdateCacheMut.RLock()
	cache, cached := rsiStrategyUpdateCache[key]
	rsiStrategyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			rsiStrategyAllColumns,
			rsiStrategyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update rsi_strategies, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"rsi_strategies\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, rsiStrategyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(rsiStrategyType, rsiStrategyMapping, append(wl, rsiStrategyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update rsi_strategies row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for rsi_strategies")
	}

	if !cached {
		rsiStrategyUpdateCacheMut.Lock()
		rsiStrategyUpdateCache[key] = cache
		rsiStrategyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q rsiStrategyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for rsi_strategies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for rsi_strategies")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RsiStrategySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rsiStrategyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"rsi_strategies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, rsiStrategyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in rsiStrategy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all rsiStrategy")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RsiStrategy) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no rsi_strategies provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rsiStrategyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	rsiStrategyUpsertCacheMut.RLock()
	cache, cached := rsiStrategyUpsertCache[key]
	rsiStrategyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			rsiStrategyAllColumns,
			rsiStrategyColumnsWithDefault,
			rsiStrategyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			rsiStrategyAllColumns,
			rsiStrategyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert rsi_strategies, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(rsiStrategyPrimaryKeyColumns))
			copy(conflict, rsiStrategyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"rsi_strategies\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(rsiStrategyType, rsiStrategyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(rsiStrategyType, rsiStrategyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert rsi_strategies")
	}

	if !cached {
		rsiStrategyUpsertCacheMut.Lock()
		rsiStrategyUpsertCache[key] = cache
		rsiStrategyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RsiStrategy record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RsiStrategy) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RsiStrategy provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), rsiStrategyPrimaryKeyMapping)
	sql := "DELETE FROM \"rsi_strategies\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from rsi_strategies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for rsi_strategies")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q rsiStrategyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no rsiStrategyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rsi_strategies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rsi_strategies")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RsiStrategySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(rsiStrategyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rsiStrategyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"rsi_strategies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rsiStrategyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rsiStrategy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rsi_strategies")
	}

	if len(rsiStrategyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RsiStrategy) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRsiStrategy(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RsiStrategySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RsiStrategySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rsiStrategyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"rsi_strategies\".* FROM \"rsi_strategies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rsiStrategyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RsiStrategySlice")
	}

	*o = slice

	return nil
}

// RsiStrategyExists checks if the RsiStrategy row exists.
func RsiStrategyExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"rsi_strategies\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if rsi_strategies exists")
	}

	return exists, nil
}
