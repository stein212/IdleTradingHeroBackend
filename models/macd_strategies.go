// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// MacdStrategy is an object representing the database table.
type MacdStrategy struct {
	ID           string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID       string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Name         string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Instrument   string    `boil:"instrument" json:"instrument" toml:"instrument" yaml:"instrument"`
	Granularity  string    `boil:"granularity" json:"granularity" toml:"granularity" yaml:"granularity"`
	Ema26        int       `boil:"ema26" json:"ema26" toml:"ema26" yaml:"ema26"`
	Ema12        int       `boil:"ema12" json:"ema12" toml:"ema12" yaml:"ema12"`
	Ema9         int       `boil:"ema9" json:"ema9" toml:"ema9" yaml:"ema9"`
	Status       string    `boil:"status" json:"status" toml:"status" yaml:"status"`
	CreatedOn    time.Time `boil:"created_on" json:"created_on" toml:"created_on" yaml:"created_on"`
	LastEditedOn time.Time `boil:"last_edited_on" json:"last_edited_on" toml:"last_edited_on" yaml:"last_edited_on"`

	R *macdStrategyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L macdStrategyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MacdStrategyColumns = struct {
	ID           string
	UserID       string
	Name         string
	Instrument   string
	Granularity  string
	Ema26        string
	Ema12        string
	Ema9         string
	Status       string
	CreatedOn    string
	LastEditedOn string
}{
	ID:           "id",
	UserID:       "user_id",
	Name:         "name",
	Instrument:   "instrument",
	Granularity:  "granularity",
	Ema26:        "ema26",
	Ema12:        "ema12",
	Ema9:         "ema9",
	Status:       "status",
	CreatedOn:    "created_on",
	LastEditedOn: "last_edited_on",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var MacdStrategyWhere = struct {
	ID           whereHelperstring
	UserID       whereHelperstring
	Name         whereHelperstring
	Instrument   whereHelperstring
	Granularity  whereHelperstring
	Ema26        whereHelperint
	Ema12        whereHelperint
	Ema9         whereHelperint
	Status       whereHelperstring
	CreatedOn    whereHelpertime_Time
	LastEditedOn whereHelpertime_Time
}{
	ID:           whereHelperstring{field: "\"macd_strategies\".\"id\""},
	UserID:       whereHelperstring{field: "\"macd_strategies\".\"user_id\""},
	Name:         whereHelperstring{field: "\"macd_strategies\".\"name\""},
	Instrument:   whereHelperstring{field: "\"macd_strategies\".\"instrument\""},
	Granularity:  whereHelperstring{field: "\"macd_strategies\".\"granularity\""},
	Ema26:        whereHelperint{field: "\"macd_strategies\".\"ema26\""},
	Ema12:        whereHelperint{field: "\"macd_strategies\".\"ema12\""},
	Ema9:         whereHelperint{field: "\"macd_strategies\".\"ema9\""},
	Status:       whereHelperstring{field: "\"macd_strategies\".\"status\""},
	CreatedOn:    whereHelpertime_Time{field: "\"macd_strategies\".\"created_on\""},
	LastEditedOn: whereHelpertime_Time{field: "\"macd_strategies\".\"last_edited_on\""},
}

// MacdStrategyRels is where relationship names are stored.
var MacdStrategyRels = struct {
	User string
}{
	User: "User",
}

// macdStrategyR is where relationships are stored.
type macdStrategyR struct {
	User *User
}

// NewStruct creates a new relationship struct
func (*macdStrategyR) NewStruct() *macdStrategyR {
	return &macdStrategyR{}
}

// macdStrategyL is where Load methods for each relationship are stored.
type macdStrategyL struct{}

var (
	macdStrategyAllColumns            = []string{"id", "user_id", "name", "instrument", "granularity", "ema26", "ema12", "ema9", "status", "created_on", "last_edited_on"}
	macdStrategyColumnsWithoutDefault = []string{"id", "user_id", "name", "instrument", "granularity", "ema26", "ema12", "ema9", "status", "created_on", "last_edited_on"}
	macdStrategyColumnsWithDefault    = []string{}
	macdStrategyPrimaryKeyColumns     = []string{"id"}
)

type (
	// MacdStrategySlice is an alias for a slice of pointers to MacdStrategy.
	// This should generally be used opposed to []MacdStrategy.
	MacdStrategySlice []*MacdStrategy
	// MacdStrategyHook is the signature for custom MacdStrategy hook methods
	MacdStrategyHook func(context.Context, boil.ContextExecutor, *MacdStrategy) error

	macdStrategyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	macdStrategyType                 = reflect.TypeOf(&MacdStrategy{})
	macdStrategyMapping              = queries.MakeStructMapping(macdStrategyType)
	macdStrategyPrimaryKeyMapping, _ = queries.BindMapping(macdStrategyType, macdStrategyMapping, macdStrategyPrimaryKeyColumns)
	macdStrategyInsertCacheMut       sync.RWMutex
	macdStrategyInsertCache          = make(map[string]insertCache)
	macdStrategyUpdateCacheMut       sync.RWMutex
	macdStrategyUpdateCache          = make(map[string]updateCache)
	macdStrategyUpsertCacheMut       sync.RWMutex
	macdStrategyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var macdStrategyBeforeInsertHooks []MacdStrategyHook
var macdStrategyBeforeUpdateHooks []MacdStrategyHook
var macdStrategyBeforeDeleteHooks []MacdStrategyHook
var macdStrategyBeforeUpsertHooks []MacdStrategyHook

var macdStrategyAfterInsertHooks []MacdStrategyHook
var macdStrategyAfterSelectHooks []MacdStrategyHook
var macdStrategyAfterUpdateHooks []MacdStrategyHook
var macdStrategyAfterDeleteHooks []MacdStrategyHook
var macdStrategyAfterUpsertHooks []MacdStrategyHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MacdStrategy) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range macdStrategyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MacdStrategy) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range macdStrategyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MacdStrategy) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range macdStrategyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MacdStrategy) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range macdStrategyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MacdStrategy) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range macdStrategyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MacdStrategy) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range macdStrategyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MacdStrategy) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range macdStrategyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MacdStrategy) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range macdStrategyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MacdStrategy) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range macdStrategyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMacdStrategyHook registers your hook function for all future operations.
func AddMacdStrategyHook(hookPoint boil.HookPoint, macdStrategyHook MacdStrategyHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		macdStrategyBeforeInsertHooks = append(macdStrategyBeforeInsertHooks, macdStrategyHook)
	case boil.BeforeUpdateHook:
		macdStrategyBeforeUpdateHooks = append(macdStrategyBeforeUpdateHooks, macdStrategyHook)
	case boil.BeforeDeleteHook:
		macdStrategyBeforeDeleteHooks = append(macdStrategyBeforeDeleteHooks, macdStrategyHook)
	case boil.BeforeUpsertHook:
		macdStrategyBeforeUpsertHooks = append(macdStrategyBeforeUpsertHooks, macdStrategyHook)
	case boil.AfterInsertHook:
		macdStrategyAfterInsertHooks = append(macdStrategyAfterInsertHooks, macdStrategyHook)
	case boil.AfterSelectHook:
		macdStrategyAfterSelectHooks = append(macdStrategyAfterSelectHooks, macdStrategyHook)
	case boil.AfterUpdateHook:
		macdStrategyAfterUpdateHooks = append(macdStrategyAfterUpdateHooks, macdStrategyHook)
	case boil.AfterDeleteHook:
		macdStrategyAfterDeleteHooks = append(macdStrategyAfterDeleteHooks, macdStrategyHook)
	case boil.AfterUpsertHook:
		macdStrategyAfterUpsertHooks = append(macdStrategyAfterUpsertHooks, macdStrategyHook)
	}
}

// One returns a single macdStrategy record from the query.
func (q macdStrategyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MacdStrategy, error) {
	o := &MacdStrategy{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for macd_strategies")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MacdStrategy records from the query.
func (q macdStrategyQuery) All(ctx context.Context, exec boil.ContextExecutor) (MacdStrategySlice, error) {
	var o []*MacdStrategy

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MacdStrategy slice")
	}

	if len(macdStrategyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MacdStrategy records in the query.
func (q macdStrategyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count macd_strategies rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q macdStrategyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if macd_strategies exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *MacdStrategy) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (macdStrategyL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMacdStrategy interface{}, mods queries.Applicator) error {
	var slice []*MacdStrategy
	var object *MacdStrategy

	if singular {
		object = maybeMacdStrategy.(*MacdStrategy)
	} else {
		slice = *maybeMacdStrategy.(*[]*MacdStrategy)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &macdStrategyR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &macdStrategyR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(macdStrategyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.MacdStrategies = append(foreign.R.MacdStrategies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.MacdStrategies = append(foreign.R.MacdStrategies, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the macdStrategy to the related item.
// Sets o.R.User to related.
// Adds o to related.R.MacdStrategies.
func (o *MacdStrategy) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"macd_strategies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, macdStrategyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &macdStrategyR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			MacdStrategies: MacdStrategySlice{o},
		}
	} else {
		related.R.MacdStrategies = append(related.R.MacdStrategies, o)
	}

	return nil
}

// MacdStrategies retrieves all the records using an executor.
func MacdStrategies(mods ...qm.QueryMod) macdStrategyQuery {
	mods = append(mods, qm.From("\"macd_strategies\""))
	return macdStrategyQuery{NewQuery(mods...)}
}

// FindMacdStrategy retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMacdStrategy(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*MacdStrategy, error) {
	macdStrategyObj := &MacdStrategy{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"macd_strategies\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, macdStrategyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from macd_strategies")
	}

	return macdStrategyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MacdStrategy) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no macd_strategies provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(macdStrategyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	macdStrategyInsertCacheMut.RLock()
	cache, cached := macdStrategyInsertCache[key]
	macdStrategyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			macdStrategyAllColumns,
			macdStrategyColumnsWithDefault,
			macdStrategyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(macdStrategyType, macdStrategyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(macdStrategyType, macdStrategyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"macd_strategies\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"macd_strategies\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into macd_strategies")
	}

	if !cached {
		macdStrategyInsertCacheMut.Lock()
		macdStrategyInsertCache[key] = cache
		macdStrategyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MacdStrategy.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MacdStrategy) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	macdStrategyUpdateCacheMut.RLock()
	cache, cached := macdStrategyUpdateCache[key]
	macdStrategyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			macdStrategyAllColumns,
			macdStrategyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update macd_strategies, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"macd_strategies\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, macdStrategyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(macdStrategyType, macdStrategyMapping, append(wl, macdStrategyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update macd_strategies row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for macd_strategies")
	}

	if !cached {
		macdStrategyUpdateCacheMut.Lock()
		macdStrategyUpdateCache[key] = cache
		macdStrategyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q macdStrategyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for macd_strategies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for macd_strategies")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MacdStrategySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), macdStrategyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"macd_strategies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, macdStrategyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in macdStrategy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all macdStrategy")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MacdStrategy) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no macd_strategies provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(macdStrategyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	macdStrategyUpsertCacheMut.RLock()
	cache, cached := macdStrategyUpsertCache[key]
	macdStrategyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			macdStrategyAllColumns,
			macdStrategyColumnsWithDefault,
			macdStrategyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			macdStrategyAllColumns,
			macdStrategyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert macd_strategies, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(macdStrategyPrimaryKeyColumns))
			copy(conflict, macdStrategyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"macd_strategies\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(macdStrategyType, macdStrategyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(macdStrategyType, macdStrategyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert macd_strategies")
	}

	if !cached {
		macdStrategyUpsertCacheMut.Lock()
		macdStrategyUpsertCache[key] = cache
		macdStrategyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MacdStrategy record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MacdStrategy) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MacdStrategy provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), macdStrategyPrimaryKeyMapping)
	sql := "DELETE FROM \"macd_strategies\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from macd_strategies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for macd_strategies")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q macdStrategyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no macdStrategyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from macd_strategies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for macd_strategies")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MacdStrategySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(macdStrategyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), macdStrategyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"macd_strategies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, macdStrategyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from macdStrategy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for macd_strategies")
	}

	if len(macdStrategyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MacdStrategy) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMacdStrategy(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MacdStrategySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MacdStrategySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), macdStrategyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"macd_strategies\".* FROM \"macd_strategies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, macdStrategyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MacdStrategySlice")
	}

	*o = slice

	return nil
}

// MacdStrategyExists checks if the MacdStrategy row exists.
func MacdStrategyExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"macd_strategies\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if macd_strategies exists")
	}

	return exists, nil
}
