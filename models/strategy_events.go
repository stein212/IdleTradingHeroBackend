// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// StrategyEvent is an object representing the database table.
type StrategyEvent struct {
	ID             string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	StrategyID     string    `boil:"strategy_id" json:"strategy_id" toml:"strategy_id" yaml:"strategy_id"`
	StrategyAction string    `boil:"strategy_action" json:"strategy_action" toml:"strategy_action" yaml:"strategy_action"`
	Amount         int       `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	EventOn        time.Time `boil:"event_on" json:"event_on" toml:"event_on" yaml:"event_on"`
	CreatedOn      time.Time `boil:"created_on" json:"created_on" toml:"created_on" yaml:"created_on"`

	R *strategyEventR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L strategyEventL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StrategyEventColumns = struct {
	ID             string
	StrategyID     string
	StrategyAction string
	Amount         string
	EventOn        string
	CreatedOn      string
}{
	ID:             "id",
	StrategyID:     "strategy_id",
	StrategyAction: "strategy_action",
	Amount:         "amount",
	EventOn:        "event_on",
	CreatedOn:      "created_on",
}

// Generated where

var StrategyEventWhere = struct {
	ID             whereHelperstring
	StrategyID     whereHelperstring
	StrategyAction whereHelperstring
	Amount         whereHelperint
	EventOn        whereHelpertime_Time
	CreatedOn      whereHelpertime_Time
}{
	ID:             whereHelperstring{field: "\"strategy_events\".\"id\""},
	StrategyID:     whereHelperstring{field: "\"strategy_events\".\"strategy_id\""},
	StrategyAction: whereHelperstring{field: "\"strategy_events\".\"strategy_action\""},
	Amount:         whereHelperint{field: "\"strategy_events\".\"amount\""},
	EventOn:        whereHelpertime_Time{field: "\"strategy_events\".\"event_on\""},
	CreatedOn:      whereHelpertime_Time{field: "\"strategy_events\".\"created_on\""},
}

// StrategyEventRels is where relationship names are stored.
var StrategyEventRels = struct {
}{}

// strategyEventR is where relationships are stored.
type strategyEventR struct {
}

// NewStruct creates a new relationship struct
func (*strategyEventR) NewStruct() *strategyEventR {
	return &strategyEventR{}
}

// strategyEventL is where Load methods for each relationship are stored.
type strategyEventL struct{}

var (
	strategyEventAllColumns            = []string{"id", "strategy_id", "strategy_action", "amount", "event_on", "created_on"}
	strategyEventColumnsWithoutDefault = []string{"id", "strategy_id", "strategy_action", "amount", "event_on", "created_on"}
	strategyEventColumnsWithDefault    = []string{}
	strategyEventPrimaryKeyColumns     = []string{"id"}
)

type (
	// StrategyEventSlice is an alias for a slice of pointers to StrategyEvent.
	// This should generally be used opposed to []StrategyEvent.
	StrategyEventSlice []*StrategyEvent
	// StrategyEventHook is the signature for custom StrategyEvent hook methods
	StrategyEventHook func(context.Context, boil.ContextExecutor, *StrategyEvent) error

	strategyEventQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	strategyEventType                 = reflect.TypeOf(&StrategyEvent{})
	strategyEventMapping              = queries.MakeStructMapping(strategyEventType)
	strategyEventPrimaryKeyMapping, _ = queries.BindMapping(strategyEventType, strategyEventMapping, strategyEventPrimaryKeyColumns)
	strategyEventInsertCacheMut       sync.RWMutex
	strategyEventInsertCache          = make(map[string]insertCache)
	strategyEventUpdateCacheMut       sync.RWMutex
	strategyEventUpdateCache          = make(map[string]updateCache)
	strategyEventUpsertCacheMut       sync.RWMutex
	strategyEventUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var strategyEventBeforeInsertHooks []StrategyEventHook
var strategyEventBeforeUpdateHooks []StrategyEventHook
var strategyEventBeforeDeleteHooks []StrategyEventHook
var strategyEventBeforeUpsertHooks []StrategyEventHook

var strategyEventAfterInsertHooks []StrategyEventHook
var strategyEventAfterSelectHooks []StrategyEventHook
var strategyEventAfterUpdateHooks []StrategyEventHook
var strategyEventAfterDeleteHooks []StrategyEventHook
var strategyEventAfterUpsertHooks []StrategyEventHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StrategyEvent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range strategyEventBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StrategyEvent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range strategyEventBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StrategyEvent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range strategyEventBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StrategyEvent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range strategyEventBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StrategyEvent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range strategyEventAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StrategyEvent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range strategyEventAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StrategyEvent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range strategyEventAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StrategyEvent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range strategyEventAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StrategyEvent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range strategyEventAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStrategyEventHook registers your hook function for all future operations.
func AddStrategyEventHook(hookPoint boil.HookPoint, strategyEventHook StrategyEventHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		strategyEventBeforeInsertHooks = append(strategyEventBeforeInsertHooks, strategyEventHook)
	case boil.BeforeUpdateHook:
		strategyEventBeforeUpdateHooks = append(strategyEventBeforeUpdateHooks, strategyEventHook)
	case boil.BeforeDeleteHook:
		strategyEventBeforeDeleteHooks = append(strategyEventBeforeDeleteHooks, strategyEventHook)
	case boil.BeforeUpsertHook:
		strategyEventBeforeUpsertHooks = append(strategyEventBeforeUpsertHooks, strategyEventHook)
	case boil.AfterInsertHook:
		strategyEventAfterInsertHooks = append(strategyEventAfterInsertHooks, strategyEventHook)
	case boil.AfterSelectHook:
		strategyEventAfterSelectHooks = append(strategyEventAfterSelectHooks, strategyEventHook)
	case boil.AfterUpdateHook:
		strategyEventAfterUpdateHooks = append(strategyEventAfterUpdateHooks, strategyEventHook)
	case boil.AfterDeleteHook:
		strategyEventAfterDeleteHooks = append(strategyEventAfterDeleteHooks, strategyEventHook)
	case boil.AfterUpsertHook:
		strategyEventAfterUpsertHooks = append(strategyEventAfterUpsertHooks, strategyEventHook)
	}
}

// One returns a single strategyEvent record from the query.
func (q strategyEventQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StrategyEvent, error) {
	o := &StrategyEvent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for strategy_events")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StrategyEvent records from the query.
func (q strategyEventQuery) All(ctx context.Context, exec boil.ContextExecutor) (StrategyEventSlice, error) {
	var o []*StrategyEvent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to StrategyEvent slice")
	}

	if len(strategyEventAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StrategyEvent records in the query.
func (q strategyEventQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count strategy_events rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q strategyEventQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if strategy_events exists")
	}

	return count > 0, nil
}

// StrategyEvents retrieves all the records using an executor.
func StrategyEvents(mods ...qm.QueryMod) strategyEventQuery {
	mods = append(mods, qm.From("\"strategy_events\""))
	return strategyEventQuery{NewQuery(mods...)}
}

// FindStrategyEvent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStrategyEvent(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*StrategyEvent, error) {
	strategyEventObj := &StrategyEvent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"strategy_events\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, strategyEventObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from strategy_events")
	}

	return strategyEventObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StrategyEvent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no strategy_events provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(strategyEventColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	strategyEventInsertCacheMut.RLock()
	cache, cached := strategyEventInsertCache[key]
	strategyEventInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			strategyEventAllColumns,
			strategyEventColumnsWithDefault,
			strategyEventColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(strategyEventType, strategyEventMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(strategyEventType, strategyEventMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"strategy_events\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"strategy_events\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into strategy_events")
	}

	if !cached {
		strategyEventInsertCacheMut.Lock()
		strategyEventInsertCache[key] = cache
		strategyEventInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the StrategyEvent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StrategyEvent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	strategyEventUpdateCacheMut.RLock()
	cache, cached := strategyEventUpdateCache[key]
	strategyEventUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			strategyEventAllColumns,
			strategyEventPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update strategy_events, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"strategy_events\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, strategyEventPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(strategyEventType, strategyEventMapping, append(wl, strategyEventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update strategy_events row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for strategy_events")
	}

	if !cached {
		strategyEventUpdateCacheMut.Lock()
		strategyEventUpdateCache[key] = cache
		strategyEventUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q strategyEventQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for strategy_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for strategy_events")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StrategyEventSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), strategyEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"strategy_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, strategyEventPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in strategyEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all strategyEvent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StrategyEvent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no strategy_events provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(strategyEventColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	strategyEventUpsertCacheMut.RLock()
	cache, cached := strategyEventUpsertCache[key]
	strategyEventUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			strategyEventAllColumns,
			strategyEventColumnsWithDefault,
			strategyEventColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			strategyEventAllColumns,
			strategyEventPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert strategy_events, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(strategyEventPrimaryKeyColumns))
			copy(conflict, strategyEventPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"strategy_events\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(strategyEventType, strategyEventMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(strategyEventType, strategyEventMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert strategy_events")
	}

	if !cached {
		strategyEventUpsertCacheMut.Lock()
		strategyEventUpsertCache[key] = cache
		strategyEventUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single StrategyEvent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StrategyEvent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StrategyEvent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), strategyEventPrimaryKeyMapping)
	sql := "DELETE FROM \"strategy_events\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from strategy_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for strategy_events")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q strategyEventQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no strategyEventQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from strategy_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for strategy_events")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StrategyEventSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(strategyEventBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), strategyEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"strategy_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, strategyEventPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from strategyEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for strategy_events")
	}

	if len(strategyEventAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StrategyEvent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStrategyEvent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StrategyEventSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StrategyEventSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), strategyEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"strategy_events\".* FROM \"strategy_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, strategyEventPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StrategyEventSlice")
	}

	*o = slice

	return nil
}

// StrategyEventExists checks if the StrategyEvent row exists.
func StrategyEventExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"strategy_events\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if strategy_events exists")
	}

	return exists, nil
}
