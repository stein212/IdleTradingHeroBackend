// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// MfiStrategy is an object representing the database table.
type MfiStrategy struct {
	ID              string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID          string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Name            string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Instrument      string    `boil:"instrument" json:"instrument" toml:"instrument" yaml:"instrument"`
	Granularity     string    `boil:"granularity" json:"granularity" toml:"granularity" yaml:"granularity"`
	OverboughtLevel int       `boil:"overbought_level" json:"overbought_level" toml:"overbought_level" yaml:"overbought_level"`
	OversoldLevel   int       `boil:"oversold_level" json:"oversold_level" toml:"oversold_level" yaml:"oversold_level"`
	Status          string    `boil:"status" json:"status" toml:"status" yaml:"status"`
	CreatedOn       time.Time `boil:"created_on" json:"created_on" toml:"created_on" yaml:"created_on"`
	LastEditedOn    time.Time `boil:"last_edited_on" json:"last_edited_on" toml:"last_edited_on" yaml:"last_edited_on"`
	DeletedOn       null.Time `boil:"deleted_on" json:"deleted_on,omitempty" toml:"deleted_on" yaml:"deleted_on,omitempty"`

	R *mfiStrategyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mfiStrategyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MfiStrategyColumns = struct {
	ID              string
	UserID          string
	Name            string
	Instrument      string
	Granularity     string
	OverboughtLevel string
	OversoldLevel   string
	Status          string
	CreatedOn       string
	LastEditedOn    string
	DeletedOn       string
}{
	ID:              "id",
	UserID:          "user_id",
	Name:            "name",
	Instrument:      "instrument",
	Granularity:     "granularity",
	OverboughtLevel: "overbought_level",
	OversoldLevel:   "oversold_level",
	Status:          "status",
	CreatedOn:       "created_on",
	LastEditedOn:    "last_edited_on",
	DeletedOn:       "deleted_on",
}

// Generated where

var MfiStrategyWhere = struct {
	ID              whereHelperstring
	UserID          whereHelperstring
	Name            whereHelperstring
	Instrument      whereHelperstring
	Granularity     whereHelperstring
	OverboughtLevel whereHelperint
	OversoldLevel   whereHelperint
	Status          whereHelperstring
	CreatedOn       whereHelpertime_Time
	LastEditedOn    whereHelpertime_Time
	DeletedOn       whereHelpernull_Time
}{
	ID:              whereHelperstring{field: "\"mfi_strategies\".\"id\""},
	UserID:          whereHelperstring{field: "\"mfi_strategies\".\"user_id\""},
	Name:            whereHelperstring{field: "\"mfi_strategies\".\"name\""},
	Instrument:      whereHelperstring{field: "\"mfi_strategies\".\"instrument\""},
	Granularity:     whereHelperstring{field: "\"mfi_strategies\".\"granularity\""},
	OverboughtLevel: whereHelperint{field: "\"mfi_strategies\".\"overbought_level\""},
	OversoldLevel:   whereHelperint{field: "\"mfi_strategies\".\"oversold_level\""},
	Status:          whereHelperstring{field: "\"mfi_strategies\".\"status\""},
	CreatedOn:       whereHelpertime_Time{field: "\"mfi_strategies\".\"created_on\""},
	LastEditedOn:    whereHelpertime_Time{field: "\"mfi_strategies\".\"last_edited_on\""},
	DeletedOn:       whereHelpernull_Time{field: "\"mfi_strategies\".\"deleted_on\""},
}

// MfiStrategyRels is where relationship names are stored.
var MfiStrategyRels = struct {
	User string
}{
	User: "User",
}

// mfiStrategyR is where relationships are stored.
type mfiStrategyR struct {
	User *User
}

// NewStruct creates a new relationship struct
func (*mfiStrategyR) NewStruct() *mfiStrategyR {
	return &mfiStrategyR{}
}

// mfiStrategyL is where Load methods for each relationship are stored.
type mfiStrategyL struct{}

var (
	mfiStrategyAllColumns            = []string{"id", "user_id", "name", "instrument", "granularity", "overbought_level", "oversold_level", "status", "created_on", "last_edited_on", "deleted_on"}
	mfiStrategyColumnsWithoutDefault = []string{"id", "user_id", "name", "instrument", "granularity", "overbought_level", "oversold_level", "status", "created_on", "last_edited_on", "deleted_on"}
	mfiStrategyColumnsWithDefault    = []string{}
	mfiStrategyPrimaryKeyColumns     = []string{"id"}
)

type (
	// MfiStrategySlice is an alias for a slice of pointers to MfiStrategy.
	// This should generally be used opposed to []MfiStrategy.
	MfiStrategySlice []*MfiStrategy
	// MfiStrategyHook is the signature for custom MfiStrategy hook methods
	MfiStrategyHook func(context.Context, boil.ContextExecutor, *MfiStrategy) error

	mfiStrategyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mfiStrategyType                 = reflect.TypeOf(&MfiStrategy{})
	mfiStrategyMapping              = queries.MakeStructMapping(mfiStrategyType)
	mfiStrategyPrimaryKeyMapping, _ = queries.BindMapping(mfiStrategyType, mfiStrategyMapping, mfiStrategyPrimaryKeyColumns)
	mfiStrategyInsertCacheMut       sync.RWMutex
	mfiStrategyInsertCache          = make(map[string]insertCache)
	mfiStrategyUpdateCacheMut       sync.RWMutex
	mfiStrategyUpdateCache          = make(map[string]updateCache)
	mfiStrategyUpsertCacheMut       sync.RWMutex
	mfiStrategyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mfiStrategyBeforeInsertHooks []MfiStrategyHook
var mfiStrategyBeforeUpdateHooks []MfiStrategyHook
var mfiStrategyBeforeDeleteHooks []MfiStrategyHook
var mfiStrategyBeforeUpsertHooks []MfiStrategyHook

var mfiStrategyAfterInsertHooks []MfiStrategyHook
var mfiStrategyAfterSelectHooks []MfiStrategyHook
var mfiStrategyAfterUpdateHooks []MfiStrategyHook
var mfiStrategyAfterDeleteHooks []MfiStrategyHook
var mfiStrategyAfterUpsertHooks []MfiStrategyHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MfiStrategy) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mfiStrategyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MfiStrategy) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mfiStrategyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MfiStrategy) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mfiStrategyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MfiStrategy) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mfiStrategyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MfiStrategy) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mfiStrategyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MfiStrategy) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mfiStrategyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MfiStrategy) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mfiStrategyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MfiStrategy) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mfiStrategyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MfiStrategy) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mfiStrategyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMfiStrategyHook registers your hook function for all future operations.
func AddMfiStrategyHook(hookPoint boil.HookPoint, mfiStrategyHook MfiStrategyHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		mfiStrategyBeforeInsertHooks = append(mfiStrategyBeforeInsertHooks, mfiStrategyHook)
	case boil.BeforeUpdateHook:
		mfiStrategyBeforeUpdateHooks = append(mfiStrategyBeforeUpdateHooks, mfiStrategyHook)
	case boil.BeforeDeleteHook:
		mfiStrategyBeforeDeleteHooks = append(mfiStrategyBeforeDeleteHooks, mfiStrategyHook)
	case boil.BeforeUpsertHook:
		mfiStrategyBeforeUpsertHooks = append(mfiStrategyBeforeUpsertHooks, mfiStrategyHook)
	case boil.AfterInsertHook:
		mfiStrategyAfterInsertHooks = append(mfiStrategyAfterInsertHooks, mfiStrategyHook)
	case boil.AfterSelectHook:
		mfiStrategyAfterSelectHooks = append(mfiStrategyAfterSelectHooks, mfiStrategyHook)
	case boil.AfterUpdateHook:
		mfiStrategyAfterUpdateHooks = append(mfiStrategyAfterUpdateHooks, mfiStrategyHook)
	case boil.AfterDeleteHook:
		mfiStrategyAfterDeleteHooks = append(mfiStrategyAfterDeleteHooks, mfiStrategyHook)
	case boil.AfterUpsertHook:
		mfiStrategyAfterUpsertHooks = append(mfiStrategyAfterUpsertHooks, mfiStrategyHook)
	}
}

// One returns a single mfiStrategy record from the query.
func (q mfiStrategyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MfiStrategy, error) {
	o := &MfiStrategy{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for mfi_strategies")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MfiStrategy records from the query.
func (q mfiStrategyQuery) All(ctx context.Context, exec boil.ContextExecutor) (MfiStrategySlice, error) {
	var o []*MfiStrategy

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MfiStrategy slice")
	}

	if len(mfiStrategyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MfiStrategy records in the query.
func (q mfiStrategyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count mfi_strategies rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mfiStrategyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if mfi_strategies exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *MfiStrategy) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mfiStrategyL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMfiStrategy interface{}, mods queries.Applicator) error {
	var slice []*MfiStrategy
	var object *MfiStrategy

	if singular {
		object = maybeMfiStrategy.(*MfiStrategy)
	} else {
		slice = *maybeMfiStrategy.(*[]*MfiStrategy)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mfiStrategyR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mfiStrategyR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(mfiStrategyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.MfiStrategies = append(foreign.R.MfiStrategies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.MfiStrategies = append(foreign.R.MfiStrategies, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the mfiStrategy to the related item.
// Sets o.R.User to related.
// Adds o to related.R.MfiStrategies.
func (o *MfiStrategy) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mfi_strategies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, mfiStrategyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &mfiStrategyR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			MfiStrategies: MfiStrategySlice{o},
		}
	} else {
		related.R.MfiStrategies = append(related.R.MfiStrategies, o)
	}

	return nil
}

// MfiStrategies retrieves all the records using an executor.
func MfiStrategies(mods ...qm.QueryMod) mfiStrategyQuery {
	mods = append(mods, qm.From("\"mfi_strategies\""))
	return mfiStrategyQuery{NewQuery(mods...)}
}

// FindMfiStrategy retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMfiStrategy(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*MfiStrategy, error) {
	mfiStrategyObj := &MfiStrategy{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mfi_strategies\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, mfiStrategyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from mfi_strategies")
	}

	return mfiStrategyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MfiStrategy) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mfi_strategies provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mfiStrategyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mfiStrategyInsertCacheMut.RLock()
	cache, cached := mfiStrategyInsertCache[key]
	mfiStrategyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mfiStrategyAllColumns,
			mfiStrategyColumnsWithDefault,
			mfiStrategyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mfiStrategyType, mfiStrategyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mfiStrategyType, mfiStrategyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mfi_strategies\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mfi_strategies\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into mfi_strategies")
	}

	if !cached {
		mfiStrategyInsertCacheMut.Lock()
		mfiStrategyInsertCache[key] = cache
		mfiStrategyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MfiStrategy.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MfiStrategy) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mfiStrategyUpdateCacheMut.RLock()
	cache, cached := mfiStrategyUpdateCache[key]
	mfiStrategyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mfiStrategyAllColumns,
			mfiStrategyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update mfi_strategies, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mfi_strategies\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mfiStrategyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mfiStrategyType, mfiStrategyMapping, append(wl, mfiStrategyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update mfi_strategies row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for mfi_strategies")
	}

	if !cached {
		mfiStrategyUpdateCacheMut.Lock()
		mfiStrategyUpdateCache[key] = cache
		mfiStrategyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mfiStrategyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for mfi_strategies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for mfi_strategies")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MfiStrategySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mfiStrategyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mfi_strategies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mfiStrategyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in mfiStrategy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all mfiStrategy")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MfiStrategy) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mfi_strategies provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mfiStrategyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mfiStrategyUpsertCacheMut.RLock()
	cache, cached := mfiStrategyUpsertCache[key]
	mfiStrategyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mfiStrategyAllColumns,
			mfiStrategyColumnsWithDefault,
			mfiStrategyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			mfiStrategyAllColumns,
			mfiStrategyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert mfi_strategies, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mfiStrategyPrimaryKeyColumns))
			copy(conflict, mfiStrategyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mfi_strategies\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mfiStrategyType, mfiStrategyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mfiStrategyType, mfiStrategyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert mfi_strategies")
	}

	if !cached {
		mfiStrategyUpsertCacheMut.Lock()
		mfiStrategyUpsertCache[key] = cache
		mfiStrategyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MfiStrategy record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MfiStrategy) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MfiStrategy provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mfiStrategyPrimaryKeyMapping)
	sql := "DELETE FROM \"mfi_strategies\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from mfi_strategies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for mfi_strategies")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mfiStrategyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no mfiStrategyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mfi_strategies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mfi_strategies")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MfiStrategySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mfiStrategyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mfiStrategyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"mfi_strategies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mfiStrategyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mfiStrategy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mfi_strategies")
	}

	if len(mfiStrategyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MfiStrategy) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMfiStrategy(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MfiStrategySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MfiStrategySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mfiStrategyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mfi_strategies\".* FROM \"mfi_strategies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mfiStrategyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MfiStrategySlice")
	}

	*o = slice

	return nil
}

// MfiStrategyExists checks if the MfiStrategy row exists.
func MfiStrategyExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mfi_strategies\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if mfi_strategies exists")
	}

	return exists, nil
}
